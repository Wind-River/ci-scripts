import jenkins.model.*
import jenkins.security.*
import hudson.model.*
import hudson.security.*
import hudson.security.csrf.DefaultCrumbIssuer
import jenkins.security.s2m.AdminWhitelistRule
/**
 * This is the groovy script to enable global security in Jenkins-master
 * Major aim of jenkins security is to ensure only oe_jenkins_build.py can submit build jobs to jenkins
 *
 * This script applies matrix authority strategy to authorize three users for different authorities
 * Administrator user has the authority to all operations in jenkins
 * Agent user is for agent docker containers to discover jenkins master and create slave jenkins node
 * Anonymous user can only read the current jenkins status from the Web UI
 *
 * Agent user's credential is generated by start_jenkins.sh and passed through wrl-ci.yaml as ENV vars, since
 * client docker need to start up using those credentials
 * Administrator user's credential is generated in this script for this credential is never used elsewhere
 */

def randomStringGenerator = {String alphabet, int n ->
  new Random().with {
    (1..n).collect {alphabet[nextInt(alphabet.length()) ] }.join()
  }
}
def alphabet = (('a'..'z')+('0'..'9')).join()

// Generate random password for admin user
String adminUser = 'admin'
def adminPassword = randomStringGenerator(alphabet, 10)

if (System.env.JENKINS_INIT_DEBUG) {
    println("Admin password: ${adminPassword}")
}

String agentUser = 'agent'
String agentPassword = randomStringGenerator(alphabet, 10)

// check if agent password is supplied using docker secrets
def agentPassFile = new File("/run/secrets/agent_password")
if (agentPassFile.exists()) {
    agentPassword = agentPassFile.text.trim()
}

// env variable always overrides
if (System.env.JENKINS_AGENT_PASSWORD) {
    agentPassword = System.env.JENKINS_AGENT_PASSWORD
}

def instance = Jenkins.getInstance()
// Set up admin & agent accounts to jenkins
def hudsonRealm = new HudsonPrivateSecurityRealm(false)
hudsonRealm.createAccount(adminUser, adminPassword)
hudsonRealm.createAccount(agentUser, agentPassword)
instance.setSecurityRealm(hudsonRealm)

// Apply Matrix Authorization Strategy for admin, agentUser & anonymous
def globalStrategy = new GlobalMatrixAuthorizationStrategy()
globalStrategy.add(Jenkins.ADMINISTER, adminUser)

// full access for authenticated users
globalStrategy.add(Jenkins.READ, 'authenticated')
globalStrategy.add(Item.READ, 'authenticated')
globalStrategy.add(Item.DISCOVER, 'authenticated')
globalStrategy.add(Item.CANCEL, 'authenticated')
globalStrategy.add(Item.CREATE, 'authenticated')
globalStrategy.add(Item.DELETE, 'authenticated')

// read only access for anonymous users
globalStrategy.add(Jenkins.READ,'anonymous')
globalStrategy.add(Item.READ, 'anonymous')

// agent user can only manage agents
globalStrategy.add(Computer.BUILD, agentUser)
globalStrategy.add(Computer.CONFIGURE, agentUser)
globalStrategy.add(Computer.CONNECT, agentUser)
globalStrategy.add(Computer.CREATE, agentUser)
globalStrategy.add(Computer.DISCONNECT, agentUser)

instance.setAuthorizationStrategy(globalStrategy)

// setup CSRF protection to avoid warning banner
// https://wiki.jenkins.io/display/JENKINS/CSRF+Protection
instance.setCrumbIssuer(new DefaultCrumbIssuer(true))

// Enable master slave access control lists
// https://wiki.jenkins.io/display/JENKINS/Slave+To+Master+Access+Control
new File('/var/jenkins_home/secrets/whitelisted-callables.d/gui.conf').write ' '
new File('/var/jenkins_home/secrets/filepath-filters.d/50-gui.conf').write ' '
instance.getInjector().getInstance(AdminWhitelistRule.class).setMasterKillSwitch(false)

instance.save()

// Output API key to a shared file bind mount to rproxy
// oe_jenkins_build.py uses this API key to set up security connection and submit jobs
def env = System.getenv()
def authPath = new File("/var/jenkins_home/auth/")
if (!authPath.exists()) {
    authPath.mkdirs()
}
def authFile = new File("/var/jenkins_home/auth/jenkins_auth.txt")
if (authFile.exists()) {
    authFile.delete()
}
User user = User.get(adminUser)
ApiTokenProperty token = user.getProperty(ApiTokenProperty.class)
def apiToken = token.getApiToken()
authFile << adminUser
authFile << ":"
authFile << "${apiToken}"
